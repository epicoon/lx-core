#!/usr/bin/env php
<?php
/**
 * This script creates directory 'lx' in the project root directory. This is a heart of the platform
 * The directory contains:
 * 1. Directory 'config' - configuration for the platform
 * 2. File 'lx' for launch platform CLI
 * 3. Directory '.system' for caches, temp files etc
 */

// fcgi doesn't have STDIN and STDOUT defined by default
defined('STDIN') or define('STDIN', fopen('php://stdin', 'r'));
defined('STDOUT') or define('STDOUT', fopen('php://stdout', 'w'));

require_once(__DIR__ . '/main.php');
$site = new lx\Directory(lx::$conductor->sitePath);

$config = defineConfig($site);
new lx\ConsoleApplication($config);

actualizeGitignore($site);
genFileStructure($site);
genConfig($site);
refreshMaps();
lx\Console::outln('Done');


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Functions
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

function defineConfig(lx\Directory $site): array
{
    return $site->contains('lx/config/__map__.php')
        ? []
        : [
            'servicesMap' => [
                'vendor',
                'services',
            ],
        ];
}

function actualizeGitignore(lx\Directory $siteDirectory): void
{
    $gitignore = $siteDirectory->makeFile('.gitignore');
    $text = $gitignore->exists() ? $gitignore->get() : '';

    $map = [
        '/vendor' => 'composer vendor dir',
        '/lx/.system' => 'lx local system dir',
        '/web/auto' => 'symlinks directory for assets',
        '/web/lx' => 'platform autogenerated web files',
    ];

    $newText = $text;
    foreach ($map as $path => $comment) {
        addGitignoreLine($path, $comment, $newText);
    }
    if ($newText != $text) {
        $gitignore->put($newText);
    }
}

function addGitignoreLine(string $path, string $comment, string &$text): void
{
    $reg = '/' . addcslashes($path, './') . '\b/';
    if (!preg_match($reg, $text)) {
        $text .= '# ' . $comment . PHP_EOL . $path . PHP_EOL . PHP_EOL;
    }
}

function genFileStructure(lx\Directory $siteDirectory): void
{
    if (!$siteDirectory->contains('services')) {
        $services = $siteDirectory->makeDirectory('services');
        $gitkeep = $services->makeFile('.gitkeep');
        $gitkeep->put('');
    }

    $lx = $siteDirectory->getOrMakeDirectory('lx');
    $system = $lx->getOrMakeDirectory('.system');
    $system->getOrMakeDirectory('temp');

    if (!$lx->contains('lx')) {
        require(__DIR__ . '/install-src/lxConsole.php');
        /**
         * @var $lxConsoleCode
         */
        $lxConsole = $lx->makeFile('lx');
        $lxConsole->put($lxConsoleCode);
    }

    $data = $lx->getOrMakeDirectory('data');
    if (!$data->contains('languages.php')) {
        $languages = $data->makeFile('languages.php');
        $languages->put(require(__DIR__ . '/install-src/data/languages.php'));
    }

    $webLx = $siteDirectory->getOrMakeDirectory('web/lx');
    $icon = new lx\File(__DIR__ . '/install-src/icon.png');
    (new lx\File($webLx->getPath() . '/icon.png'))->copy($icon);
}

function genConfig(lx\Directory $siteDirectory): void
{
    $lx = $siteDirectory->get('lx');
    if ($lx->contains('config')) {
        return;
    }

    $config = $lx->makeDirectory('config');
    /**
     * @var $configMainCode
     * @var $configRoutesCode
     * @var $configPluginCode
     * @var $configServiceCode
     */
    require(__DIR__ . '/install-src/configTpl.php');

    $configMain = $config->makeFile('main.php');
    $configMain->put($configMainCode);

    $configRoutes = $config->makeFile('routes.php');
    $configRoutes->put($configRoutesCode);

    $configPlugin = $config->makeFile('plugin.php');
    $configPlugin->put($configPluginCode);

    $configService = $config->makeFile('service.php');
    $configService->put($configServiceCode);
}

function refreshMaps(): void
{
    (new lx\AutoloadMapBuilder())->createCommonAutoloadMap();
    lx::$autoloader->map->reset();
    (new lx\JsModuleMapActualizer())->renewHead();

    $compiler = new lx\AppAssetCompiler();
    $compiler->compileJsCore();
    $compiler->compileAppCss();

    lx\PluginAssetProvider::makePluginsAssetLinks();
}
